# -*- coding: utf-8 -*-
"""Model Sistem Rekomendasi-Agum Medisa

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzOCDyHIBFUwTAsPQOU9StwiIwmVML-H

# Sistem Rekomendasi Game (Content-based Filtering) berdasarkan genre, platform, dan skor review

## **Project Overview**
Proyek ini bertujuan membangun sistem rekomendasi game berbasis Content-Based Filtering (CbF) dengan mempertimbangkan genre, platform, dan skor review sebagai fitur utama. Sistem ini akan memberikan saran game yang mirip dengan game tertentu yang disukai pengguna, berdasarkan karakteristik kontennya.

## **Data Understanding**
Project ini berdasarkan dan diambil dari dataset **Kaggle** dengan nama Metacritic Games 1995-2024 yang dapat diakses pada link berikut https://www.kaggle.com/datasets/uuratl/metacritic-games-12-23-2024

Jumlah Baris dan Kolom
Dataset Metacritic Games 1995-2024 terdiri dari:

- Jumlah baris: 13.398 baris, di mana setiap baris mewakili satu game yang telah dirilis dan dinilai di Metacritic
- Jumlah kolom: Dataset ini memiliki beberapa kolom utama yang menyediakan informasi tentang setiap game

Jumlah ini mencerminkan cakupan yang luas dari game yang dirilis selama hampir tiga dekade (1995-2024), memberikan gambaran komprehensif tentang tren dan perubahan dalam industri game selama periode tersebut.

# Data Understanding

## Pengantar Pembahasan Informasi Data

Data understanding adalah tahap krusial dalam analisis data di mana kita membangun pemahaman mendasar tentang dataset yang akan dianalisis. Untuk dataset Metacritic Games 1995-2024, proses ini mencakup mengenali sumber data, memahami struktur data, mengidentifikasi masalah kualitas data, dan memahami arti dari setiap fitur dalam dataset.

## URL/Tautan Sumber Data

Dataset ini bersumber dari platform Kaggle, yang merupakan komunitas data science dan machine learning terbesar di dunia. Dataset Metacritic Games 1995-2024 dapat diakses melalui tautan berikut:
https://www.kaggle.com/datasets/uuratl/metacritic-games-12-23-2024

Dataset ini merupakan kompilasi data game yang dikumpulkan dari situs Metacritic, yang merupakan agregator ulasan terkenal untuk media termasuk video game, film, acara TV, musik, dan lainnya. Metacritic khususnya terkenal dalam industri game karena sistem penilaiannya yang disebut "Metascore" yang mengagregasi ulasan dari berbagai kritikus profesional.

## Jumlah Baris dan Kolom

Dataset Metacritic Games 1995-2024 terdiri dari:
- **Jumlah baris**: 13.398 baris, di mana setiap baris mewakili satu game yang telah dirilis dan dinilai di Metacritic
- **Jumlah kolom**: Dataset ini memiliki beberapa kolom utama yang menyediakan informasi tentang setiap game

Jumlah ini mencerminkan cakupan yang luas dari game yang dirilis selama hampir tiga dekade (1995-2024), memberikan gambaran komprehensif tentang tren dan perubahan dalam industri game selama periode tersebut.

## Kondisi Data

### Missing Values
Dataset Metacritic Games kemungkinan memiliki beberapa nilai yang hilang (missing values), terutama pada kolom-kolom seperti:

- `user_review_score`: Beberapa game mungkin tidak memiliki nilai ini jika belum mendapatkan cukup ulasan dari pengguna
- `metacritic_review_score`: Game yang baru dirilis atau kurang populer mungkin belum memiliki skor dari kritikus profesional
- `genres`: Beberapa game mungkin tidak memiliki kategorisasi genre yang jelas

## Uraian Seluruh Fitur pada Data

Berikut adalah uraian dari fitur-fitur utama dalam dataset Metacritic Games 1995-2024:

1. **name**: Nama dari game
   - Tipe data: String/Text
   - Deskripsi: Judul resmi dari game yang dirilis

2. **genres**: Genre dari game
   - Tipe data: String/Tex
   - Deskripsi: Kategori game seperti "Open-World Action", "3D Platformer", "RPG", dll.
   - Nilai mungkin dipisahkan oleh koma atau format lain untuk game dengan multiple genre

3. **platforms**: Platform tempat game tersedia
   - Tipe data: String/Text
   - Deskripsi: Platform gaming seperti "PlayStation 4", "PC", "Nintendo Switch", dll.
   - Satu game bisa tersedia di beberapa platform

4. **metacritic_review_score**: Skor dari kritikus profesional
   - Tipe data: Numerik
   - Deskripsi: Agregat skor dari berbagai reviewer profesional yang dikelola oleh Metacritic

5. **user_review_score**: Skor dari pengguna biasa
   - Tipe data: Numerik
   - Deskripsi: Rata-rata skor yang diberikan oleh pengguna Metacritic

6. **must_play**: Label untuk game unggulan
   - Tipe data: Boolean atau kategorikal (Yes/No)
   - Deskripsi: Penanda untuk game yang dianggap "must play" atau sangat direkomendasikan

# **Import Library**
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity

"""## **Memuat Data**"""

url = 'https://raw.githubusercontent.com/agummds/Sistem-Rekomendasi/master/Dataset/12_23_2024_detailed_data.csv'

df = pd.read_csv(url)
df.head(20)

df.tail()

df.info()

"""Untuk Content-Based Filtering, kolom penting:
- **genres** → untuk minat & preferensi
- **platforms** → untuk kenyamanan & kompatibilitas
- **metacritic_review_score** & **user_review_score** → indikator kualitas
- Bagian name, developer, publisher, review_count tidak dimasukkan langsung ke fitur model, tapi bisa digunakan untuk visualisasi/analisis tambahan
"""

# Cek missing values pada setiap dataset
print("\nCek missing values pada setiap dataset:")
print(f"total missing values: {df.isnull().sum().sum()} nilai hilang")

"""Berdasarkan info, terdapat sebanyak 3686 data yang hilang, karena ada data metacritic_review_score & user_review_score yang ikut hilang maka perlu urus untuk data yang hilang itu dengan beberapa penanganan"""

print("\nCek duplikat pada setiap dataset:")
print(f"Total data duplikat: {df.duplicated().sum()} duplikat")

"""Berdasarkan output kode, tidak ada data yang duplikat, berarti data aman

# Data Preprocessing
"""

# Konversi skor ke numerik
df['metacritic_review_score'] = pd.to_numeric(df['metacritic_review_score'], errors='coerce')
df['metacritic_review_count'] = pd.to_numeric(df['metacritic_review_count'], errors='coerce')
df['user_review_score'] = pd.to_numeric(df['user_review_score'], errors='coerce')
df['user_review_count'] = pd.to_numeric(df['user_review_count'], errors='coerce')

print(df[['metacritic_review_score', 'user_review_score']].describe())

"""- Distribusi Skor Cenderung Positif: Median skor dari kritikus (metacritic_review_score) adalah 72, dan skor pengguna (user_review_score) adalah 7.2, menunjukkan bahwa sebagian besar game mendapatkan penilaian yang cukup baik dari kedua pihak.

- Sebaran Skor Lebih Luas di Metacritic: Skor kritikus berkisar dari 11 hingga 99, sedangkan skor pengguna berkisar dari 0.3 hingga 10, menunjukkan bahwa pengguna memiliki sistem penilaian yang lebih terbatas (skala 0–10).

- Skor Pengguna Lebih Konsisten: Standar deviasi user review lebih kecil (±1.36) dibandingkan metacritic (±12.35), yang berarti ulasan pengguna cenderung lebih konsisten atau homogen.

- Ada Game dengan Skor Sangat Rendah: Terdapat game dengan skor sangat buruk dari kedua sisi (kritikus memberi nilai serendah 11, dan pengguna serendah 0.3), menunjukkan kemungkinan adanya game yang sangat buruk atau sangat kontroversial.

- Perbedaan Sistem Skoring Harus Di-normalisasi: Karena perbedaan skala (0–100 vs 0–10), penting untuk melakukan normalisasi sebelum digabungkan sebagai fitur dalam model rekomendasi.

# Exploratory Data Analisis (EDA)

## **A. Univariate EDA**

## a. **Distribusi Skor Review**
"""

# Buat kategori skor
metacritic_bins = pd.cut(df['metacritic_review_score'], bins=[0, 20, 40, 60, 80, 100], labels=["0–20", "21–40", "41–60", "61–80", "81–100"])
user_bins = pd.cut(df['user_review_score'], bins=[0, 2, 4, 6, 8, 10], labels=["0–2", "2.1–4", "4.1–6", "6.1–8", "8.1–10"])

# Hitung frekuensi
metacritic_counts = metacritic_bins.value_counts().sort_index()
user_counts = user_bins.value_counts().sort_index()

# Warna
blues = plt.cm.Blues(np.linspace(0.3, 0.8, len(metacritic_counts)))
reds = plt.cm.Reds(np.linspace(0.3, 0.8, len(user_counts)))

# Explode untuk efek renggang antar irisan
explode_m = [0.03] * len(metacritic_counts)
explode_u = [0.03] * len(user_counts)

# Pie Chart Metacritic
plt.figure(figsize=(7, 7))
plt.pie(metacritic_counts,
        labels=metacritic_counts.index,
        autopct='%1.1f%%',
        startangle=140,
        colors=blues,
        explode=explode_m,
        pctdistance=0.8,
        labeldistance=1.1)
plt.title("Distribusi Skor Metacritic (Kategori)", fontsize=14)
plt.tight_layout()
plt.show()

# Pie Chart User
plt.figure(figsize=(7, 7))
plt.pie(user_counts,
        labels=user_counts.index,
        autopct='%1.1f%%',
        startangle=140,
        colors=reds,
        explode=explode_u,
        pctdistance=0.8,
        labeldistance=1.1)
plt.title("Distribusi Skor User (Kategori)", fontsize=14)
plt.tight_layout()
plt.show()

"""**Mayoritas game memiliki skor Metacritic pada rentang 61–80 (60%) dan 81–100 (20.7%), yang menunjukkan bahwa sebagian besar game dalam dataset mendapatkan review yang positif hingga sangat baik. Sementara itu, hanya sebagian kecil game yang berada di kategori rendah (di bawah 60), mengindikasikan bahwa game dengan kualitas buruk relatif sedikit dalam dataset ini.**

## **b.Distribusi Genre**
"""

# Pecah string genre jadi list
df['genres_split'] = df['genres'].str.split(',\s*')

# Hitung frekuensi semua genre
from collections import Counter
genre_counts = Counter(genre for sublist in df['genres_split'].dropna() for genre in sublist)

# Visualisasi top 10 genre
top_genres = pd.DataFrame(genre_counts.most_common(10), columns=['Genre', 'Jumlah'])

plt.figure(figsize=(10, 5))
sns.barplot(x='Jumlah', y='Genre', data=top_genres, palette='viridis')
plt.title('Top 10 Genre Game Terpopuler')
plt.xlabel('Jumlah Game')
plt.ylabel('Genre')
plt.show()

"""**Genre yang paling banyak muncul dalam dataset adalah Action Adventure, diikuti oleh 2D Platformer dan Action RPG. Ini menunjukkan bahwa genre aksi dan petualangan mendominasi pasar game, yang bisa jadi disebabkan oleh gameplay yang lebih seru dan jangkauan pemain yang lebih luas. Genre-genre ini cocok dijadikan fokus utama dalam sistem rekomendasi karena popularitasnya tinggi.**

## **c. Distribusi Platform**
"""

# Pecah string platform jadi list
df['platforms_split'] = df['platforms'].str.split(',\s*')

# Hitung frekuensi semua platform
platform_counts = Counter(platform for sublist in df['platforms_split'].dropna() for platform in sublist)

# Visualisasi top 10 platform
top_platforms = pd.DataFrame(platform_counts.most_common(5), columns=['Platform', 'Jumlah'])

plt.figure(figsize=(10, 5))
sns.barplot(x='Jumlah', y='Platform', data=top_platforms, palette='magma')
plt.title('Top 5 Platform Game Terpopuler')
plt.xlabel('Jumlah Game')
plt.ylabel('Platform')
plt.show()

"""**Platform PC mendominasi sebagai platform dengan jumlah game terbanyak dalam dataset, meskipun muncul dalam beberapa variasi format penulisan (seperti 'PC', ['PC']). Ini menunjukkan bahwa PC merupakan platform utama bagi pengembang dan pemain game. Platform PlayStation 4 dan Xbox One juga masuk dalam lima besar, menandakan bahwa konsol tetap menjadi pasar penting dalam industri game.**

## **d. ESRB Rating**
"""

esrb_counts = df['esrb'].value_counts()

plt.figure(figsize=(6,6))
plt.pie(esrb_counts, labels=esrb_counts.index, autopct='%1.1f%%', startangle=140)
plt.title("Distribusi Rating ESRB")
plt.show()

"""- Persebaran rating dari game juga beragam, dan pada dataset ini gam untuk **Teen** lebih unggu dari yang lain. sehingga dapat dikategorikan kalau game-game pada dataset ramah Remaja. Disusul game Rated E yang beda 4% dari game for Teen

## **e. Developer**
"""

top_devs = df.groupby('developer')['name'].count().sort_values(ascending=False).head(10)

plt.figure(figsize=(10,6))
sns.barplot(x=top_devs.values, y=top_devs.index, palette='magma')
plt.title("Top 10 Developer Berdasarkan Jumlah Game")
plt.xlabel("Jumlah Game")
plt.ylabel("Developer")
plt.show()

"""- Developer dari game pada dataset di ungguli oleh Capcom dengan jumlah game lebih dari 175 judul dan disusul oleh Nintendo diposisi kedua

## **f. Must Play Games**
"""

must_play_count = df['must_play'].value_counts(normalize=True) * 100
print(must_play_count)

"""- Hanya sekitar 2,43% dari seluruh game dalam dataset yang masuk ke dalam kategori "Must Play", sementara sisanya sebesar 97,57% tidak termasuk dalam kategori tersebut. Ini menunjukkan bahwa hanya sebagian kecil game yang dianggap sangat direkomendasikan atau memiliki kualitas luar biasa menurut kriteria tertentu (misalnya, ulasan pengguna dan kritikus, popularitas, atau skor tinggi).

## **B. Multivariate EDA**

## a. Rata-rata Skor per Genre
"""

# Pisah genre dulu
df_exploded = df.copy()
df_exploded['genres'] = df_exploded['genres'].str.split(', ')
df_exploded = df_exploded.explode('genres')

# Rata-rata skor per genre
genre_score = df_exploded.groupby('genres')['metacritic_review_score'].mean().sort_values(ascending=False)

plt.figure(figsize=(12, 6))
sns.barplot(x=genre_score.values[:10], y=genre_score.index[:10], palette='coolwarm')
plt.title("Rata-rata Skor Metacritic per Genre (Top 10)")
plt.xlabel("Rata-rata Skor")
plt.ylabel("Genre")
plt.show()

"""- Dari persebaran data, diambil Top 10 game dengan score terbaik dan itu diungguli oleh Soccer Management dan diposisi kedua adalah Racing Sim. Dapa diambil kesimpulan kalau para pemain game lebih menyukai game bertema sport seperti yang tertera pada posisi pertama dan kedua

## **b. Platform vs Must Play**
"""

df_platform = df.copy()
df_platform['platforms'] = df_platform['platforms'].str.split(', ')
df_platform = df_platform.explode('platforms')

must_play_by_platform = df_platform[df_platform['must_play'] == 1]['platforms'].value_counts().head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x=must_play_by_platform.values, y=must_play_by_platform.index, palette='Set2')
plt.title("Must Play Games per Platform (Top 10)")
plt.xlabel("Jumlah Must Play")
plt.ylabel("Platform")
plt.show()

"""- Dari data dapat dilihat Top 10 platform yang sering digunakan oleh player ketika berbaik game, dan itu diungguli oleh platform PC. Bisa diambil asumsi bahwa PC memiliki banyak game yang mudah untuk diakses oleh player.

## **c.  Skor Metacritic vs User vs Must Play**
"""

plt.figure(figsize=(10, 6))

sns.scatterplot(
    data=df,
    x='metacritic_review_score',
    y='user_review_score',
    hue='must_play',
    style='must_play',
    palette={0: 'lightgray', 1: 'crimson'},
    s=60,
    edgecolor='black',
    alpha=0.7
)

plt.title("Perbandingan Skor Metacritic vs User (Must Play Highlight)", fontsize=14)
plt.xlabel("Skor Metacritic", fontsize=12)
plt.ylabel("Skor User", fontsize=12)
plt.legend(title="Must Play", labels=["Bukan Must Play", "Must Play"])
plt.grid(True, linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

"""- Game yang berlabel "Must Play" (warna merah) umumnya memiliki skor Metacritic tinggi (90–100) dan skor user juga tinggi (di atas 7).

- Sebagian besar game lainnya tersebar luas, tetapi tidak semua skor Metacritic tinggi disukai user, terlihat dari beberapa game dengan skor user rendah meski Metacritic-nya tinggi.

- Label "Must Play" sangat jarang ditemukan pada skor Metacritic <90.

## d. ESRB vs Genre
"""

# Ambil top 10 genre paling umum
top_genres = df_exploded['genres'].value_counts().head(10).index
df_top = df_exploded[df_exploded['genres'].isin(top_genres)]

# Hitung jumlah game per kombinasi esrb & genre
grouped = df_top.groupby(['genres', 'esrb']).size().reset_index(name='count')

# Plot grouped bar chart
plt.figure(figsize=(12, 6))
sns.barplot(data=grouped, x='genres', y='count', hue='esrb', palette='Set2')
plt.title("Jumlah Game per Genre dan Rating ESRB (Top 10 Genre)")
plt.xlabel("Genre")
plt.ylabel("Jumlah Game")
plt.xticks(rotation=45)
plt.legend(title='ESRB')
plt.tight_layout()
plt.show()

"""- Genre dengan Jumlah Game Terbanyak:Genre 'Action RPG' dan '2D Platformer' memiliki jumlah game tertinggi secara keseluruhan.
- 'FPS' (First Person Shooter) didominasi oleh rating Mature, menandakan bahwa genre ini lebih banyak ditujukan untuk pemain dewasa.
- Distribusi Rating ESRB: Rated E (Everyone) banyak terdapat pada genre '2D Platformer', menunjukkan bahwa genre ini ramah untuk segala usia. Rated T (Teen) mendominasi banyak genre seperti 'Action RPG', 'Action Adventure', dan 'JRPG'. Rated M (Mature) sangat dominan di genre seperti 'FPS', 'Open-World Action', dan 'Survival', menunjukkan bahwa game dengan konten lebih dewasa populer di genre-genre ini.
- Genre yang Merata di Semua Rating: Genre seperti 'Adventure' dan 'Point-and-Click' menunjukkan distribusi rating yang relatif merata, menandakan fleksibilitas genre tersebut untuk berbagai usia.

# **Tahapan Persiapan Data untuk Pemodelan (Content-Based Filtering)**

## **a.  Encoding Teks**
"""

# Gabungkan genre dan platform jadi satu teks
df['combined_features'] = df['genres'] + ' ' + df['platforms']

vectorizer = TfidfVectorizer()
feature_matrix = vectorizer.fit_transform(df['combined_features'])

"""## **b. Penaganan Missing Value**



"""

# 1. Periksa tipe data terlebih dahulu untuk memastikan konversi yang tepat
print(df.dtypes)

# Convert to numeric dengan hati-hati
# Tampaknya kolom-kolom ini mungkin dalam format string atau memiliki karakter non-numerik
df['metacritic_review_count'] = pd.to_numeric(df['metacritic_review_count'], errors='coerce')
df['metacritic_review_score'] = pd.to_numeric(df['metacritic_review_score'], errors='coerce')
df['user_review_count'] = pd.to_numeric(df['user_review_count'], errors='coerce')
df['user_review_score'] = pd.to_numeric(df['user_review_score'], errors='coerce')

# 2. Imputasi missing values
# Untuk kolom review count, kita bisa menggantinya dengan 0 karena tidak adanya review adalah valid
df['metacritic_review_count'].fillna(0, inplace=True)
df['user_review_count'].fillna(0, inplace=True)

# Untuk review score, kita bisa menggunakan median atau mean
median_metacritic_score = df['metacritic_review_score'].median()
median_user_score = df['user_review_score'].median()

df['metacritic_review_score'].fillna(median_metacritic_score, inplace=True)
df['user_review_score'].fillna(median_user_score, inplace=True)
# 3. Verifikasi bahwa tidak ada lagi missing value
print(df.isnull().sum())

"""# Membangun Sistem Rekomendasi Berbasis Konten (Content-Based Filtering)

## a.  Gabungkan Fitur Teks
genres + platforms
"""

df['combined_features'] = df['genres'] + ' ' + df['platforms']

"""Membuat fitur baru combined_features dengan menggabungkan genres dan platforms menggunakan spasi (' ').

*Tujuannya:*
- Membuat representasi tekstual yang lebih kaya untuk model Content-Based Filtering.

## b. Inisialisasi TF-IDF

Inisialisasi TfidfVectorizer dengan stop_words='english' untuk menghapus kata-kata umum yang tidak bermakna penting.
"""

tfidf = TfidfVectorizer(stop_words='english')

"""## c.  Fit dan Transform Data"""

tfidf_matrix = tfidf.fit_transform(df['combined_features'])

print(tfidf.get_feature_names_out())

"""**Hasilnya:**
- Membentuk matriks TF-IDF yang merepresentasikan kemiripan konten antar game berdasarkan teks.

## Pembuatan Fungsi Berdasarkan Nama Game
 - Fungsi Content-Based Filtering berdasarkan judul game, dan yang dikembalikan adalah daftar game yang mirip
"""

indices = pd.Series(df.index, index=df['name']).drop_duplicates()

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def recommend_games(title, cosine_sim=cosine_sim, df=df, top_n=5):
    """
    Memberikan rekomendasi game mirip berdasarkan judul.

    Args:
        title (str): Judul game yang ingin dicari kemiripannya
        cosine_sim (array): Matriks cosine similarity antar game
        df (DataFrame): DataFrame asli
        top_n (int): Jumlah rekomendasi yang ingin ditampilkan

    Returns:
        DataFrame: Daftar game mirip
    """
    # Cek apakah judul ada di dataset
    if title not in indices:
        return f"Game '{title}' tidak ditemukan di data."

    # Ambil index dari game
    idx = indices[title]

    # Ambil skor kemiripan game tsb ke semua game lain
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan dari skor tertinggi ke terendah (kecuali diri sendiri)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n + 1]

    # Ambil index game rekomendasi
    game_indices = [i[0] for i in sim_scores]

    # Return dataframe hasil
    return df[['name', 'genres', 'platforms']].iloc[game_indices].reset_index(drop=True)

recommend_games("Yaris", top_n=5)

"""## Fungsi Top-N Game Mirip

Fungsi top_n_recommendations bertujuan untuk mengidentifikasi dan mengembalikan DataFrame yang berisi top_n game teratas yang menunjukkan skor kemiripan rata-rata tertinggi jika dibandingkan dengan game lain dalam dataset. Fungsi ini mencapai tujuannya dengan terlebih dahulu menghitung rata-rata cosine similarity untuk setiap game terhadap semua game lain menggunakan np.mean(cosine_sim, axis=1). Kemudian, ia membuat DataFrame baru result_df dengan nama game, genre, platform, dan rata-rata kemiripan yang dihitung. Terakhir, ia mengurutkan DataFrame ini dalam urutan menurun berdasarkan rata-rata kemiripan dan mengembalikan top_n entri teratas, memberikan wawasan tentang game yang memiliki fitur paling umum dan dengan demikian dianggap sangat mirip dengan yang lain dalam dataset.
"""

def top_n_recommendations(cosine_sim, df, top_n=10):

    # Hitung rata-rata similarity tiap game ke semua game lain
    avg_sim = np.mean(cosine_sim, axis=1)

    # Buat DataFrame hasil
    result_df = df[['name', 'genres', 'platforms']].copy()
    result_df['avg_similarity'] = avg_sim

    # Urutkan dari yang paling mirip dengan banyak game lain
    result_df = result_df.sort_values(by='avg_similarity', ascending=False)

    return result_df.head(top_n).reset_index(drop=True)

"""# Matrik  Evaluasi"""

cosine_sim

"""- Diagonal Nilai = 1.0 → Self-Similarity

Baris dan kolom diagonal memiliki nilai 1.0, artinya setiap game pasti 100% mirip dengan dirinya sendiri — ini adalah karakteristik alami dari cosine similarity.

- Sebagian Besar Nilai = 0 → Banyak Game Tidak Mirip

Banyak nilai cosine yang 0.0, menandakan banyak pasangan game yang tidak memiliki kesamaan konten berdasarkan fitur yang digunakan (genre, platform, review score).
Ini juga bisa menunjukkan bahwa fitur sangat sparse atau tidak terlalu banyak overlap antar game.

- Ada Game yang Sangat Mirip (0.6+):
Misalnya, nilai 0.6459 antara game ke-0 dan ke-2 menunjukkan adanya kemiripan yang signifikan berdasarkan konten (bisa jadi genre dan platform-nya sama, serta skor review-nya mirip).
Ini penting dalam sistem rekomendasi karena game-game inilah yang akan muncul sebagai hasil rekomendasi utama.

- Distribusi Miripnya Game Tidak Merata:

Terlihat ada game yang punya banyak kemiripan (beberapa nilai > 0), dan ada juga yang hampir tidak mirip dengan game lainnya sama sekali (baris penuh 0 kecuali diagonal).

Ini bisa mengindikasikan bahwa beberapa game sangat unik, atau fitur mereka tidak terekstrak dengan baik (misalnya, genre yang sangat niche).

- Perlu Threshold untuk Rekomendasi:

Karena banyak nilai similarity mendekati 0, penting untuk menetapkan threshold minimal (misalnya 0.2 atau 0.3) agar rekomendasi yang diberikan benar-benar relevan dan tidak asal mirip.
"""

top_n_recommendations(cosine_sim, df, top_n=10)

"""### 📊 Insight dari Top-N Rekomendasi

Berikut adalah beberapa insight yang diperoleh dari hasil Top-10 rekomendasi yang dihasilkan oleh sistem:

## 1. Genre Konsisten
- Semua game yang direkomendasikan memiliki genre utama **Action Adventure**.
- Hal ini menunjukkan bahwa sistem mampu memahami dan memprioritaskan genre sebagai salah satu faktor utama dalam rekomendasi.

## 2. Platform yang Relevan
- Game yang direkomendasikan sebagian besar tersedia di platform populer seperti **PlayStation 4**, **PC**, **Xbox One**, dan **Nintendo Switch**.
- Ini memastikan bahwa pengguna mendapatkan rekomendasi game yang kompatibel dengan perangkat yang mereka gunakan.

## 3. Nilai Similarity yang Tinggi
- Rata-rata nilai similarity berkisar antara **0.248** hingga **0.253**, yang termasuk tinggi dalam skala cosine similarity.
- Menunjukkan bahwa rekomendasi yang dihasilkan sangat relevan berdasarkan kombinasi fitur teks.

## 4. Variasi dalam Kesamaan
- Walaupun semua game berada dalam genre yang sama, judul-judul yang direkomendasikan tetap menawarkan variasi dari segi cerita, tema, dan gameplay.
- Ini memberikan pengguna lebih banyak pilihan tanpa mengorbankan relevansi.

## 5. Potensi Pengembangan Sistem
- Sistem saat ini hanya mengandalkan `genres` dan `platforms`.
- Untuk meningkatkan akurasi di masa depan, fitur tambahan seperti **developer**, **mode permainan** (singleplayer/multiplayer), atau **rating pengguna** dapat dipertimbangkan.

"""